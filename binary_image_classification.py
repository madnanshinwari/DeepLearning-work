# -*- coding: utf-8 -*-
"""binary-image-classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Da3eH2vzNtCzdoyx5oSKvuCXN1XbSDAz
"""

import numpy as np
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image

"""
Use ImageDataGenerator for load and preprocess the images.this tool automatically labels the images based on the folder names and prepares them for training."""

train_datagen = ImageDataGenerator(rescale = 1./255, # rescale the pixel values (divide by 255) Normalize the images
                                   rotation_range = 30,
                                   width_shift_range = 0.2,
                                   height_shift_range = 0.2,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True,
                                   fill_mode='nearest') # Fill in newly created pixels after transformations using the nearest pixel valuescsc

"""## load the Training Data:

"""

train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/Lab work/DL /binary classification/dataset/train',
    target_size = (128, 128), # resize all images to 128 x 128 pixels,
    batch_size = 32, # number of images process at a time
    class_mode = 'binary'

)

"""## Loading and Preprocessing test data:

"""

test_datagen = ImageDataGenerator(rescale = 1./255) # rescale pixel values(divide by 255) to normalize the images

"""## Load the test data:"""

test_generator = test_datagen.flow_from_directory(
    '/content/drive/MyDrive/Lab work/DL /binary classification/dataset/test',
    target_size = (128,128),
    batch_size = 32,
    class_mode = 'binary'
)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten,Dense

"""## Define the Model:

"""

model = Sequential([
    Conv2D(32,(3,3), activation ='relu', input_shape =(128,128,3)), # 3 colors channels
    MaxPooling2D((2,2)),
    Conv2D(64,(3,3), activation ='relu'),
    MaxPooling2D((2,2)),
    Conv2D(128,(3,3), activation ='relu'),
    MaxPooling2D((2,2)),
    Flatten(),
    Dense(64, activation ='relu'),
    Dense(1, activation ='sigmoid')  # output layer for binary classification

]
)

"""## Compile Model:"""

model.compile(
    optimizer = 'adam',
    loss ='binary_crossentropy', # loss function for binary classification
    metrics = ['accuracy']
)

"""## Train the Model:"""

history = model.fit(
    train_generator,
    steps_per_epoch = train_generator.samples // train_generator.batch_size, # number of batches per epoch
    epochs = 5,
    validation_data = test_generator,
    validation_steps = test_generator.samples // test_generator.batch_size # number of validation steps per epoch
)

"""## Evaluate the Model:"""

loss ,accuarcy =model.evaluate(
    test_generator,
    steps = test_generator.samples // test_generator.batch_size # Number of test steps per epoch
)
print(f"Test accuracy :{accuarcy * 100:.2f}%")

"""## Make a predication:"""

from tensorflow.keras.preprocessing import image

img_path ='/content/drive/MyDrive/Lab work/DL /binary classification/dataset/test/Cars/6.jpg'
img = image.load_img(img_path, target_size=(128,128))
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array /= 255.0

# predicat the class
prediction = model.predict(img_array)
print('Car' if prediction[0][0] < 0.5 else 'Cricket ball' )

"""## Plotting  the Accuracy"""

import matplotlib.pyplot as plt
plt.figure(figsize=(8,6))
plt.plot(history.history['accuracy'], label ='Train accuracy')
plt.plot(history.history['val_accuracy'], label='Validation accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()